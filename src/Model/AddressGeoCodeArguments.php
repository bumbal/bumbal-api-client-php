<?php
/**
 * AddressGeoCodeArguments
 *
 * PHP version 5
 *
 * @category Class
 * @package  BumbalClient
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * OpenAPI spec version: 2.0
 * Contact: info@bumbal.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BumbalClient\Model;

use \ArrayAccess;

/**
 * AddressGeoCodeArguments Class Doc Comment
 *
 * @category    Class
 * @package     BumbalClient
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AddressGeoCodeArguments implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'AddressGeoCodeArguments';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address' => '\BumbalClient\Model\AddressModel',
        'exclude_providers' => 'string[]',
        'minimum_certainty' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address' => null,
        'exclude_providers' => null,
        'minimum_certainty' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
        'exclude_providers' => 'exclude_providers',
        'minimum_certainty' => 'minimum_certainty'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
        'exclude_providers' => 'setExcludeProviders',
        'minimum_certainty' => 'setMinimumCertainty'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
        'exclude_providers' => 'getExcludeProviders',
        'minimum_certainty' => 'getMinimumCertainty'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const EXCLUDE_PROVIDERS_GOOGLE_MAPS = 'google_maps';
    const EXCLUDE_PROVIDERS_GRAPHHOPPER_OSM = 'graphhopper_osm';
    const EXCLUDE_PROVIDERS_GEOPUNT_BE = 'geopunt_be';
    const EXCLUDE_PROVIDERS_GEOSERVICES_WALLONIE = 'geoservices_wallonie';
    const EXCLUDE_PROVIDERS_GRAPHHOPPER_OSM_GISGRAPHY = 'graphhopper_osm_gisgraphy';
    const EXCLUDE_PROVIDERS_GRAPHHOPPER_OSM_NOMINATIM = 'graphhopper_osm_nominatim';
    const EXCLUDE_PROVIDERS_GRAPHHOPPER_OSM_OPENCAGEDATA = 'graphhopper_osm_opencagedata';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getExcludeProvidersAllowableValues()
    {
        return [
            self::EXCLUDE_PROVIDERS_GOOGLE_MAPS,
            self::EXCLUDE_PROVIDERS_GRAPHHOPPER_OSM,
            self::EXCLUDE_PROVIDERS_GEOPUNT_BE,
            self::EXCLUDE_PROVIDERS_GEOSERVICES_WALLONIE,
            self::EXCLUDE_PROVIDERS_GRAPHHOPPER_OSM_GISGRAPHY,
            self::EXCLUDE_PROVIDERS_GRAPHHOPPER_OSM_NOMINATIM,
            self::EXCLUDE_PROVIDERS_GRAPHHOPPER_OSM_OPENCAGEDATA,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['exclude_providers'] = isset($data['exclude_providers']) ? $data['exclude_providers'] : null;
        $this->container['minimum_certainty'] = isset($data['minimum_certainty']) ? $data['minimum_certainty'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['address'] === null) {
            $invalid_properties[] = "'address' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['address'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets address
     * @return \BumbalClient\Model\AddressModel
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     * @param \BumbalClient\Model\AddressModel $address
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets exclude_providers
     * @return string[]
     */
    public function getExcludeProviders()
    {
        return $this->container['exclude_providers'];
    }

    /**
     * Sets exclude_providers
     * @param string[] $exclude_providers which providers to exclude from using as a geocoder
     * @return $this
     */
    public function setExcludeProviders($exclude_providers)
    {
        $allowed_values = $this->getExcludeProvidersAllowableValues();
        if (!is_null($exclude_providers) && array_diff($exclude_providers, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'exclude_providers', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['exclude_providers'] = $exclude_providers;

        return $this;
    }

    /**
     * Gets minimum_certainty
     * @return int
     */
    public function getMinimumCertainty()
    {
        return $this->container['minimum_certainty'];
    }

    /**
     * Sets minimum_certainty
     * @param int $minimum_certainty don't accept results that have a certainty that's too low. Expressed as an int between 0 and 100
     * @return $this
     */
    public function setMinimumCertainty($minimum_certainty)
    {
        $this->container['minimum_certainty'] = $minimum_certainty;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\BumbalClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\BumbalClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}


