<?php
/**
 * OpeningHoursRuleModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  BumbalClient
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bumbal.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BumbalClient\Model;

use \ArrayAccess;

/**
 * OpeningHoursRuleModel Class Doc Comment
 *
 * @category    Class
 * @package     BumbalClient
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OpeningHoursRuleModel implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'OpeningHoursRuleModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'address_id' => 'int',
        'time_from' => 'string',
        'time_to' => 'string',
        'valid_date_from' => 'string',
        'valid_date_to' => 'string',
        'weekday' => 'int',
        'precedence' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'address_id' => 'int64',
        'time_from' => null,
        'time_to' => null,
        'valid_date_from' => null,
        'valid_date_to' => null,
        'weekday' => null,
        'precedence' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'address_id' => 'address_id',
        'time_from' => 'time_from',
        'time_to' => 'time_to',
        'valid_date_from' => 'valid_date_from',
        'valid_date_to' => 'valid_date_to',
        'weekday' => 'weekday',
        'precedence' => 'precedence'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'address_id' => 'setAddressId',
        'time_from' => 'setTimeFrom',
        'time_to' => 'setTimeTo',
        'valid_date_from' => 'setValidDateFrom',
        'valid_date_to' => 'setValidDateTo',
        'weekday' => 'setWeekday',
        'precedence' => 'setPrecedence'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'address_id' => 'getAddressId',
        'time_from' => 'getTimeFrom',
        'time_to' => 'getTimeTo',
        'valid_date_from' => 'getValidDateFrom',
        'valid_date_to' => 'getValidDateTo',
        'weekday' => 'getWeekday',
        'precedence' => 'getPrecedence'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['address_id'] = isset($data['address_id']) ? $data['address_id'] : null;
        $this->container['time_from'] = isset($data['time_from']) ? $data['time_from'] : '08:00';
        $this->container['time_to'] = isset($data['time_to']) ? $data['time_to'] : '18:00';
        $this->container['valid_date_from'] = isset($data['valid_date_from']) ? $data['valid_date_from'] : '1970-01-01';
        $this->container['valid_date_to'] = isset($data['valid_date_to']) ? $data['valid_date_to'] : '2200-01-01';
        $this->container['weekday'] = isset($data['weekday']) ? $data['weekday'] : null;
        $this->container['precedence'] = isset($data['precedence']) ? $data['precedence'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Unique ID
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets address_id
     * @return int
     */
    public function getAddressId()
    {
        return $this->container['address_id'];
    }

    /**
     * Sets address_id
     * @param int $address_id Address ID associated with this OpeningHoursRule
     * @return $this
     */
    public function setAddressId($address_id)
    {
        $this->container['address_id'] = $address_id;

        return $this;
    }

    /**
     * Gets time_from
     * @return string
     */
    public function getTimeFrom()
    {
        return $this->container['time_from'];
    }

    /**
     * Sets time_from
     * @param string $time_from We define time_from = '00:00' and time_to = '00:00' to mean no opening times, i.e. closed.
     * @return $this
     */
    public function setTimeFrom($time_from)
    {
        $this->container['time_from'] = $time_from;

        return $this;
    }

    /**
     * Gets time_to
     * @return string
     */
    public function getTimeTo()
    {
        return $this->container['time_to'];
    }

    /**
     * Sets time_to
     * @param string $time_to
     * @return $this
     */
    public function setTimeTo($time_to)
    {
        $this->container['time_to'] = $time_to;

        return $this;
    }

    /**
     * Gets valid_date_from
     * @return string
     */
    public function getValidDateFrom()
    {
        return $this->container['valid_date_from'];
    }

    /**
     * Sets valid_date_from
     * @param string $valid_date_from
     * @return $this
     */
    public function setValidDateFrom($valid_date_from)
    {
        $this->container['valid_date_from'] = $valid_date_from;

        return $this;
    }

    /**
     * Gets valid_date_to
     * @return string
     */
    public function getValidDateTo()
    {
        return $this->container['valid_date_to'];
    }

    /**
     * Sets valid_date_to
     * @param string $valid_date_to
     * @return $this
     */
    public function setValidDateTo($valid_date_to)
    {
        $this->container['valid_date_to'] = $valid_date_to;

        return $this;
    }

    /**
     * Gets weekday
     * @return int
     */
    public function getWeekday()
    {
        return $this->container['weekday'];
    }

    /**
     * Sets weekday
     * @param int $weekday value 7 represents all weekdays. 0 = monday, etc.
     * @return $this
     */
    public function setWeekday($weekday)
    {
        $this->container['weekday'] = $weekday;

        return $this;
    }

    /**
     * Gets precedence
     * @return int
     */
    public function getPrecedence()
    {
        return $this->container['precedence'];
    }

    /**
     * Sets precedence
     * @param int $precedence lowest precedence is 0. Accepted values are 0 and 1 right now. If more rules apply to a date, only rules with highest precendence will apply.
     * @return $this
     */
    public function setPrecedence($precedence)
    {
        $this->container['precedence'] = $precedence;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    #[\ReturnTypeWillChange]
    #[\ReturnTypeWillChange]
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    #[\ReturnTypeWillChange]
    #[\ReturnTypeWillChange]
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    #[\ReturnTypeWillChange]
    #[\ReturnTypeWillChange]
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    #[\ReturnTypeWillChange]
    #[\ReturnTypeWillChange]
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\BumbalClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\BumbalClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}


