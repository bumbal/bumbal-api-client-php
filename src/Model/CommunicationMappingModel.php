<?php
/**
 * CommunicationMappingModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  BumbalClient
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * OpenAPI spec version: 2.0
 * Contact: info@bumbal.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BumbalClient\Model;

use \ArrayAccess;

/**
 * CommunicationMappingModel Class Doc Comment
 *
 * @category    Class
 * @package     BumbalClient
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CommunicationMappingModel implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CommunicationMappingModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'communication_template_id' => 'int',
        'communication_template_name' => 'string',
        'communication_template' => '\BumbalClient\Model\CommunicationTemplateModel',
        'communication_delivery_method_id' => 'int',
        'communication_delivery_method_name' => 'string',
        'communication_message_type_id' => 'int',
        'communication_message_type_name' => 'string',
        'no_tags' => 'bool',
        'tag_names' => 'string[]',
        'tags' => '\BumbalClient\Model\TagModel[]',
        'no_zones' => 'bool',
        'zones' => '\BumbalClient\Model\ZoneModel[]',
        'zone_names' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'communication_template_id' => null,
        'communication_template_name' => null,
        'communication_template' => null,
        'communication_delivery_method_id' => null,
        'communication_delivery_method_name' => null,
        'communication_message_type_id' => null,
        'communication_message_type_name' => null,
        'no_tags' => null,
        'tag_names' => null,
        'tags' => null,
        'no_zones' => null,
        'zones' => null,
        'zone_names' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'communication_template_id' => 'communication_template_id',
        'communication_template_name' => 'communication_template_name',
        'communication_template' => 'communication_template',
        'communication_delivery_method_id' => 'communication_delivery_method_id',
        'communication_delivery_method_name' => 'communication_delivery_method_name',
        'communication_message_type_id' => 'communication_message_type_id',
        'communication_message_type_name' => 'communication_message_type_name',
        'no_tags' => 'no_tags',
        'tag_names' => 'tag_names',
        'tags' => 'tags',
        'no_zones' => 'no_zones',
        'zones' => 'zones',
        'zone_names' => 'zone_names'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'communication_template_id' => 'setCommunicationTemplateId',
        'communication_template_name' => 'setCommunicationTemplateName',
        'communication_template' => 'setCommunicationTemplate',
        'communication_delivery_method_id' => 'setCommunicationDeliveryMethodId',
        'communication_delivery_method_name' => 'setCommunicationDeliveryMethodName',
        'communication_message_type_id' => 'setCommunicationMessageTypeId',
        'communication_message_type_name' => 'setCommunicationMessageTypeName',
        'no_tags' => 'setNoTags',
        'tag_names' => 'setTagNames',
        'tags' => 'setTags',
        'no_zones' => 'setNoZones',
        'zones' => 'setZones',
        'zone_names' => 'setZoneNames'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'communication_template_id' => 'getCommunicationTemplateId',
        'communication_template_name' => 'getCommunicationTemplateName',
        'communication_template' => 'getCommunicationTemplate',
        'communication_delivery_method_id' => 'getCommunicationDeliveryMethodId',
        'communication_delivery_method_name' => 'getCommunicationDeliveryMethodName',
        'communication_message_type_id' => 'getCommunicationMessageTypeId',
        'communication_message_type_name' => 'getCommunicationMessageTypeName',
        'no_tags' => 'getNoTags',
        'tag_names' => 'getTagNames',
        'tags' => 'getTags',
        'no_zones' => 'getNoZones',
        'zones' => 'getZones',
        'zone_names' => 'getZoneNames'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['communication_template_id'] = isset($data['communication_template_id']) ? $data['communication_template_id'] : null;
        $this->container['communication_template_name'] = isset($data['communication_template_name']) ? $data['communication_template_name'] : null;
        $this->container['communication_template'] = isset($data['communication_template']) ? $data['communication_template'] : null;
        $this->container['communication_delivery_method_id'] = isset($data['communication_delivery_method_id']) ? $data['communication_delivery_method_id'] : null;
        $this->container['communication_delivery_method_name'] = isset($data['communication_delivery_method_name']) ? $data['communication_delivery_method_name'] : null;
        $this->container['communication_message_type_id'] = isset($data['communication_message_type_id']) ? $data['communication_message_type_id'] : null;
        $this->container['communication_message_type_name'] = isset($data['communication_message_type_name']) ? $data['communication_message_type_name'] : null;
        $this->container['no_tags'] = isset($data['no_tags']) ? $data['no_tags'] : null;
        $this->container['tag_names'] = isset($data['tag_names']) ? $data['tag_names'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['no_zones'] = isset($data['no_zones']) ? $data['no_zones'] : null;
        $this->container['zones'] = isset($data['zones']) ? $data['zones'] : null;
        $this->container['zone_names'] = isset($data['zone_names']) ? $data['zone_names'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Identifier
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets communication_template_id
     * @return int
     */
    public function getCommunicationTemplateId()
    {
        return $this->container['communication_template_id'];
    }

    /**
     * Sets communication_template_id
     * @param int $communication_template_id Template ID
     * @return $this
     */
    public function setCommunicationTemplateId($communication_template_id)
    {
        $this->container['communication_template_id'] = $communication_template_id;

        return $this;
    }

    /**
     * Gets communication_template_name
     * @return string
     */
    public function getCommunicationTemplateName()
    {
        return $this->container['communication_template_name'];
    }

    /**
     * Sets communication_template_name
     * @param string $communication_template_name Template Name
     * @return $this
     */
    public function setCommunicationTemplateName($communication_template_name)
    {
        $this->container['communication_template_name'] = $communication_template_name;

        return $this;
    }

    /**
     * Gets communication_template
     * @return \BumbalClient\Model\CommunicationTemplateModel
     */
    public function getCommunicationTemplate()
    {
        return $this->container['communication_template'];
    }

    /**
     * Sets communication_template
     * @param \BumbalClient\Model\CommunicationTemplateModel $communication_template
     * @return $this
     */
    public function setCommunicationTemplate($communication_template)
    {
        $this->container['communication_template'] = $communication_template;

        return $this;
    }

    /**
     * Gets communication_delivery_method_id
     * @return int
     */
    public function getCommunicationDeliveryMethodId()
    {
        return $this->container['communication_delivery_method_id'];
    }

    /**
     * Sets communication_delivery_method_id
     * @param int $communication_delivery_method_id Delivery Method ID
     * @return $this
     */
    public function setCommunicationDeliveryMethodId($communication_delivery_method_id)
    {
        $this->container['communication_delivery_method_id'] = $communication_delivery_method_id;

        return $this;
    }

    /**
     * Gets communication_delivery_method_name
     * @return string
     */
    public function getCommunicationDeliveryMethodName()
    {
        return $this->container['communication_delivery_method_name'];
    }

    /**
     * Sets communication_delivery_method_name
     * @param string $communication_delivery_method_name Delivery Method Name
     * @return $this
     */
    public function setCommunicationDeliveryMethodName($communication_delivery_method_name)
    {
        $this->container['communication_delivery_method_name'] = $communication_delivery_method_name;

        return $this;
    }

    /**
     * Gets communication_message_type_id
     * @return int
     */
    public function getCommunicationMessageTypeId()
    {
        return $this->container['communication_message_type_id'];
    }

    /**
     * Sets communication_message_type_id
     * @param int $communication_message_type_id MessageType ID
     * @return $this
     */
    public function setCommunicationMessageTypeId($communication_message_type_id)
    {
        $this->container['communication_message_type_id'] = $communication_message_type_id;

        return $this;
    }

    /**
     * Gets communication_message_type_name
     * @return string
     */
    public function getCommunicationMessageTypeName()
    {
        return $this->container['communication_message_type_name'];
    }

    /**
     * Sets communication_message_type_name
     * @param string $communication_message_type_name MessageType Name
     * @return $this
     */
    public function setCommunicationMessageTypeName($communication_message_type_name)
    {
        $this->container['communication_message_type_name'] = $communication_message_type_name;

        return $this;
    }

    /**
     * Gets no_tags
     * @return bool
     */
    public function getNoTags()
    {
        return $this->container['no_tags'];
    }

    /**
     * Sets no_tags
     * @param bool $no_tags No Tag Flag
     * @return $this
     */
    public function setNoTags($no_tags)
    {
        $this->container['no_tags'] = $no_tags;

        return $this;
    }

    /**
     * Gets tag_names
     * @return string[]
     */
    public function getTagNames()
    {
        return $this->container['tag_names'];
    }

    /**
     * Sets tag_names
     * @param string[] $tag_names Tag names
     * @return $this
     */
    public function setTagNames($tag_names)
    {
        $this->container['tag_names'] = $tag_names;

        return $this;
    }

    /**
     * Gets tags
     * @return \BumbalClient\Model\TagModel[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     * @param \BumbalClient\Model\TagModel[] $tags
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets no_zones
     * @return bool
     */
    public function getNoZones()
    {
        return $this->container['no_zones'];
    }

    /**
     * Sets no_zones
     * @param bool $no_zones No zones Flag
     * @return $this
     */
    public function setNoZones($no_zones)
    {
        $this->container['no_zones'] = $no_zones;

        return $this;
    }

    /**
     * Gets zones
     * @return \BumbalClient\Model\ZoneModel[]
     */
    public function getZones()
    {
        return $this->container['zones'];
    }

    /**
     * Sets zones
     * @param \BumbalClient\Model\ZoneModel[] $zones
     * @return $this
     */
    public function setZones($zones)
    {
        $this->container['zones'] = $zones;

        return $this;
    }

    /**
     * Gets zone_names
     * @return string[]
     */
    public function getZoneNames()
    {
        return $this->container['zone_names'];
    }

    /**
     * Sets zone_names
     * @param string[] $zone_names Zone names
     * @return $this
     */
    public function setZoneNames($zone_names)
    {
        $this->container['zone_names'] = $zone_names;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\BumbalClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\BumbalClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}


