<?php
/**
 * CommunicationMessageModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  BumbalClient
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * OpenAPI spec version: 2.0
 * Contact: info@bumbal.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BumbalClient\Model;

use \ArrayAccess;

/**
 * CommunicationMessageModel Class Doc Comment
 *
 * @category    Class
 * @package     BumbalClient
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CommunicationMessageModel implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CommunicationMessageModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'activity_id' => 'int',
        'message_type' => 'string',
        'message_type_name' => 'string',
        'scheduled_at' => 'string',
        'executed_at' => 'string',
        'status_id' => 'int',
        'communication_mapping_id' => 'int',
        'communication_mapping' => '\BumbalClient\Model\CommunicationTemplateModel',
        'communication_message_history' => '\BumbalClient\Model\CommunicationMessageHistoryModel[]',
        'communication_message_content' => '\BumbalClient\Model\CommunicationMessageContentModel',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'created_by' => 'int',
        'updated_by' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'activity_id' => null,
        'message_type' => null,
        'message_type_name' => null,
        'scheduled_at' => null,
        'executed_at' => null,
        'status_id' => null,
        'communication_mapping_id' => null,
        'communication_mapping' => null,
        'communication_message_history' => null,
        'communication_message_content' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'created_by' => null,
        'updated_by' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'activity_id' => 'activity_id',
        'message_type' => 'message_type',
        'message_type_name' => 'message_type_name',
        'scheduled_at' => 'scheduled_at',
        'executed_at' => 'executed_at',
        'status_id' => 'status_id',
        'communication_mapping_id' => 'communication_mapping_id',
        'communication_mapping' => 'communication_mapping',
        'communication_message_history' => 'communication_message_history',
        'communication_message_content' => 'communication_message_content',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'created_by' => 'created_by',
        'updated_by' => 'updated_by'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'activity_id' => 'setActivityId',
        'message_type' => 'setMessageType',
        'message_type_name' => 'setMessageTypeName',
        'scheduled_at' => 'setScheduledAt',
        'executed_at' => 'setExecutedAt',
        'status_id' => 'setStatusId',
        'communication_mapping_id' => 'setCommunicationMappingId',
        'communication_mapping' => 'setCommunicationMapping',
        'communication_message_history' => 'setCommunicationMessageHistory',
        'communication_message_content' => 'setCommunicationMessageContent',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'created_by' => 'setCreatedBy',
        'updated_by' => 'setUpdatedBy'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'activity_id' => 'getActivityId',
        'message_type' => 'getMessageType',
        'message_type_name' => 'getMessageTypeName',
        'scheduled_at' => 'getScheduledAt',
        'executed_at' => 'getExecutedAt',
        'status_id' => 'getStatusId',
        'communication_mapping_id' => 'getCommunicationMappingId',
        'communication_mapping' => 'getCommunicationMapping',
        'communication_message_history' => 'getCommunicationMessageHistory',
        'communication_message_content' => 'getCommunicationMessageContent',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'created_by' => 'getCreatedBy',
        'updated_by' => 'getUpdatedBy'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['activity_id'] = isset($data['activity_id']) ? $data['activity_id'] : null;
        $this->container['message_type'] = isset($data['message_type']) ? $data['message_type'] : null;
        $this->container['message_type_name'] = isset($data['message_type_name']) ? $data['message_type_name'] : null;
        $this->container['scheduled_at'] = isset($data['scheduled_at']) ? $data['scheduled_at'] : null;
        $this->container['executed_at'] = isset($data['executed_at']) ? $data['executed_at'] : null;
        $this->container['status_id'] = isset($data['status_id']) ? $data['status_id'] : null;
        $this->container['communication_mapping_id'] = isset($data['communication_mapping_id']) ? $data['communication_mapping_id'] : null;
        $this->container['communication_mapping'] = isset($data['communication_mapping']) ? $data['communication_mapping'] : null;
        $this->container['communication_message_history'] = isset($data['communication_message_history']) ? $data['communication_message_history'] : null;
        $this->container['communication_message_content'] = isset($data['communication_message_content']) ? $data['communication_message_content'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['updated_by'] = isset($data['updated_by']) ? $data['updated_by'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Identifier
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets activity_id
     * @return int
     */
    public function getActivityId()
    {
        return $this->container['activity_id'];
    }

    /**
     * Sets activity_id
     * @param int $activity_id Activity ID
     * @return $this
     */
    public function setActivityId($activity_id)
    {
        $this->container['activity_id'] = $activity_id;

        return $this;
    }

    /**
     * Gets message_type
     * @return string
     */
    public function getMessageType()
    {
        return $this->container['message_type'];
    }

    /**
     * Sets message_type
     * @param string $message_type Type of message
     * @return $this
     */
    public function setMessageType($message_type)
    {
        $this->container['message_type'] = $message_type;

        return $this;
    }

    /**
     * Gets message_type_name
     * @return string
     */
    public function getMessageTypeName()
    {
        return $this->container['message_type_name'];
    }

    /**
     * Sets message_type_name
     * @param string $message_type_name Message type name
     * @return $this
     */
    public function setMessageTypeName($message_type_name)
    {
        $this->container['message_type_name'] = $message_type_name;

        return $this;
    }

    /**
     * Gets scheduled_at
     * @return string
     */
    public function getScheduledAt()
    {
        return $this->container['scheduled_at'];
    }

    /**
     * Sets scheduled_at
     * @param string $scheduled_at When the message is scheduled
     * @return $this
     */
    public function setScheduledAt($scheduled_at)
    {
        $this->container['scheduled_at'] = $scheduled_at;

        return $this;
    }

    /**
     * Gets executed_at
     * @return string
     */
    public function getExecutedAt()
    {
        return $this->container['executed_at'];
    }

    /**
     * Sets executed_at
     * @param string $executed_at When the message is executed
     * @return $this
     */
    public function setExecutedAt($executed_at)
    {
        $this->container['executed_at'] = $executed_at;

        return $this;
    }

    /**
     * Gets status_id
     * @return int
     */
    public function getStatusId()
    {
        return $this->container['status_id'];
    }

    /**
     * Sets status_id
     * @param int $status_id The status of the message (0 = new, 10 = scheduled, 20 = processing, 30 = executed)
     * @return $this
     */
    public function setStatusId($status_id)
    {
        $this->container['status_id'] = $status_id;

        return $this;
    }

    /**
     * Gets communication_mapping_id
     * @return int
     */
    public function getCommunicationMappingId()
    {
        return $this->container['communication_mapping_id'];
    }

    /**
     * Sets communication_mapping_id
     * @param int $communication_mapping_id The mapping used for this message
     * @return $this
     */
    public function setCommunicationMappingId($communication_mapping_id)
    {
        $this->container['communication_mapping_id'] = $communication_mapping_id;

        return $this;
    }

    /**
     * Gets communication_mapping
     * @return \BumbalClient\Model\CommunicationTemplateModel
     */
    public function getCommunicationMapping()
    {
        return $this->container['communication_mapping'];
    }

    /**
     * Sets communication_mapping
     * @param \BumbalClient\Model\CommunicationTemplateModel $communication_mapping
     * @return $this
     */
    public function setCommunicationMapping($communication_mapping)
    {
        $this->container['communication_mapping'] = $communication_mapping;

        return $this;
    }

    /**
     * Gets communication_message_history
     * @return \BumbalClient\Model\CommunicationMessageHistoryModel[]
     */
    public function getCommunicationMessageHistory()
    {
        return $this->container['communication_message_history'];
    }

    /**
     * Sets communication_message_history
     * @param \BumbalClient\Model\CommunicationMessageHistoryModel[] $communication_message_history All the history events for a message (sorted chronologically)
     * @return $this
     */
    public function setCommunicationMessageHistory($communication_message_history)
    {
        $this->container['communication_message_history'] = $communication_message_history;

        return $this;
    }

    /**
     * Gets communication_message_content
     * @return \BumbalClient\Model\CommunicationMessageContentModel
     */
    public function getCommunicationMessageContent()
    {
        return $this->container['communication_message_content'];
    }

    /**
     * Sets communication_message_content
     * @param \BumbalClient\Model\CommunicationMessageContentModel $communication_message_content
     * @return $this
     */
    public function setCommunicationMessageContent($communication_message_content)
    {
        $this->container['communication_message_content'] = $communication_message_content;

        return $this;
    }

    /**
     * Gets created_at
     * @return \DateTime|string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param \DateTime|string|null $created_at created_at date time
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     * @return \DateTime|string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     * @param \DateTime|string|null $updated_at updated_at date time
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets created_by
     * @return int
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     * @param int $created_by created_by user id
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_by
     * @return int
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     * @param int $updated_by updated_by user id
     * @return $this
     */
    public function setUpdatedBy($updated_by)
    {
        $this->container['updated_by'] = $updated_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\BumbalClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\BumbalClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}


