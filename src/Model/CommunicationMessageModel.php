<?php
/**
 * CommunicationMessageModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  BumbalClient
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * OpenAPI spec version: 2.0
 * Contact: info@bumbal.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BumbalClient\Model;

use \ArrayAccess;

/**
 * CommunicationMessageModel Class Doc Comment
 *
 * @category    Class
 * @package     BumbalClient
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CommunicationMessageModel implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CommunicationMessageModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'activity_id' => 'int',
        'communication_mapping_id' => 'int',
        'communication_mapping' => '\BumbalClient\Model\CommunicationTemplateModel',
        'recipient' => 'string',
        'subject' => 'string',
        'html_content' => 'string',
        'text_content' => 'string',
        'communication_message_history' => '\BumbalClient\Model\CommunicationMessageHistoryModel[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'activity_id' => null,
        'communication_mapping_id' => null,
        'communication_mapping' => null,
        'recipient' => null,
        'subject' => null,
        'html_content' => null,
        'text_content' => null,
        'communication_message_history' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'activity_id' => 'activity_id',
        'communication_mapping_id' => 'communication_mapping_id',
        'communication_mapping' => 'communication_mapping',
        'recipient' => 'recipient',
        'subject' => 'subject',
        'html_content' => 'html_content',
        'text_content' => 'text_content',
        'communication_message_history' => 'communication_message_history'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'activity_id' => 'setActivityId',
        'communication_mapping_id' => 'setCommunicationMappingId',
        'communication_mapping' => 'setCommunicationMapping',
        'recipient' => 'setRecipient',
        'subject' => 'setSubject',
        'html_content' => 'setHtmlContent',
        'text_content' => 'setTextContent',
        'communication_message_history' => 'setCommunicationMessageHistory'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'activity_id' => 'getActivityId',
        'communication_mapping_id' => 'getCommunicationMappingId',
        'communication_mapping' => 'getCommunicationMapping',
        'recipient' => 'getRecipient',
        'subject' => 'getSubject',
        'html_content' => 'getHtmlContent',
        'text_content' => 'getTextContent',
        'communication_message_history' => 'getCommunicationMessageHistory'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['activity_id'] = isset($data['activity_id']) ? $data['activity_id'] : null;
        $this->container['communication_mapping_id'] = isset($data['communication_mapping_id']) ? $data['communication_mapping_id'] : null;
        $this->container['communication_mapping'] = isset($data['communication_mapping']) ? $data['communication_mapping'] : null;
        $this->container['recipient'] = isset($data['recipient']) ? $data['recipient'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['html_content'] = isset($data['html_content']) ? $data['html_content'] : null;
        $this->container['text_content'] = isset($data['text_content']) ? $data['text_content'] : null;
        $this->container['communication_message_history'] = isset($data['communication_message_history']) ? $data['communication_message_history'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Identifier
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets activity_id
     * @return int
     */
    public function getActivityId()
    {
        return $this->container['activity_id'];
    }

    /**
     * Sets activity_id
     * @param int $activity_id Activity ID
     * @return $this
     */
    public function setActivityId($activity_id)
    {
        $this->container['activity_id'] = $activity_id;

        return $this;
    }

    /**
     * Gets communication_mapping_id
     * @return int
     */
    public function getCommunicationMappingId()
    {
        return $this->container['communication_mapping_id'];
    }

    /**
     * Sets communication_mapping_id
     * @param int $communication_mapping_id Activity ID
     * @return $this
     */
    public function setCommunicationMappingId($communication_mapping_id)
    {
        $this->container['communication_mapping_id'] = $communication_mapping_id;

        return $this;
    }

    /**
     * Gets communication_mapping
     * @return \BumbalClient\Model\CommunicationTemplateModel
     */
    public function getCommunicationMapping()
    {
        return $this->container['communication_mapping'];
    }

    /**
     * Sets communication_mapping
     * @param \BumbalClient\Model\CommunicationTemplateModel $communication_mapping 
     * @return $this
     */
    public function setCommunicationMapping($communication_mapping)
    {
        $this->container['communication_mapping'] = $communication_mapping;

        return $this;
    }

    /**
     * Gets recipient
     * @return string
     */
    public function getRecipient()
    {
        return $this->container['recipient'];
    }

    /**
     * Sets recipient
     * @param string $recipient recipient
     * @return $this
     */
    public function setRecipient($recipient)
    {
        $this->container['recipient'] = $recipient;

        return $this;
    }

    /**
     * Gets subject
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     * @param string $subject subject
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets html_content
     * @return string
     */
    public function getHtmlContent()
    {
        return $this->container['html_content'];
    }

    /**
     * Sets html_content
     * @param string $html_content HTML content
     * @return $this
     */
    public function setHtmlContent($html_content)
    {
        $this->container['html_content'] = $html_content;

        return $this;
    }

    /**
     * Gets text_content
     * @return string
     */
    public function getTextContent()
    {
        return $this->container['text_content'];
    }

    /**
     * Sets text_content
     * @param string $text_content text content
     * @return $this
     */
    public function setTextContent($text_content)
    {
        $this->container['text_content'] = $text_content;

        return $this;
    }

    /**
     * Gets communication_message_history
     * @return \BumbalClient\Model\CommunicationMessageHistoryModel[]
     */
    public function getCommunicationMessageHistory()
    {
        return $this->container['communication_message_history'];
    }

    /**
     * Sets communication_message_history
     * @param \BumbalClient\Model\CommunicationMessageHistoryModel[] $communication_message_history 
     * @return $this
     */
    public function setCommunicationMessageHistory($communication_message_history)
    {
        $this->container['communication_message_history'] = $communication_message_history;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\BumbalClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\BumbalClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}


